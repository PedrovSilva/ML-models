{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":7,"metadata":{"id":"pUG8IB62OyhT","executionInfo":{"status":"ok","timestamp":1696107022779,"user_tz":240,"elapsed":2033,"user":{"displayName":"Pedro Silva","userId":"02286839328570899636"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"4a83d1af-c44e-41f8-c611-5d024649ff1a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.metrics import mean_squared_error, mean_absolute_error, confusion_matrix, r2_score\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Activation\n","from sklearn.metrics import confusion_matrix\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["sep = ';'\n","dtype = 'float'\n","\n","data = pd.read_csv('/content/drive/MyDrive/Faculdade /Projeto CAP/Dados/Indices_voos_blocos_19_e_23_embrapa/Estatisticas/agora vai com prodv2.csv', sep=sep, dtype=dtype)\n","\n","# Extrair as colunas relevantes\n","X = data[['Mean_voo1__NDVI','Mean_voo2__NDVI','Mean_voo3__NDVI']].values\n","input_dim = 3\n","y = data['Mean_voo4__NDVI'].values"],"metadata":{"id":"G5922kqSQzzc","executionInfo":{"status":"ok","timestamp":1696107022780,"user_tz":240,"elapsed":3,"user":{"displayName":"Pedro Silva","userId":"02286839328570899636"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# Normalizar as colunas de entrada\n","scaler = MinMaxScaler()\n","X_normalized = scaler.fit_transform(X)\n","y_normalized = scaler.fit_transform(y.reshape(-1, 1))\n","\n","# Dividir os dados em conjuntos de treinamento e teste\n","X_train, X_test, y_train, y_test = train_test_split(X_normalized, y, test_size=0.2, random_state=42)"],"metadata":{"id":"jfIXkPkBRqJg","executionInfo":{"status":"ok","timestamp":1696107022780,"user_tz":240,"elapsed":2,"user":{"displayName":"Pedro Silva","userId":"02286839328570899636"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Construir o modelo de rede neural\n","model = Sequential()\n","model.add(Dense(54, activation='relu', input_dim=input_dim))\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1))\n","\n","# Compilar o modelo\n","model.compile(optimizer='adam', loss='mean_squared_error')"],"metadata":{"id":"xdN3rYCCRrGM","executionInfo":{"status":"ok","timestamp":1696107022780,"user_tz":240,"elapsed":2,"user":{"displayName":"Pedro Silva","userId":"02286839328570899636"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# Treinar o modelo\n","model.fit(X_train, y_train, epochs=100, batch_size=54)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Tv7lRm89RwrN","executionInfo":{"status":"ok","timestamp":1696107026299,"user_tz":240,"elapsed":3521,"user":{"displayName":"Pedro Silva","userId":"02286839328570899636"}},"outputId":"e7f9368e-ca25-4dd7-aa32-16ddcc0ae54c"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","1/1 [==============================] - 1s 663ms/step - loss: 0.4905\n","Epoch 2/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.4574\n","Epoch 3/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.4257\n","Epoch 4/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.3959\n","Epoch 5/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.3681\n","Epoch 6/100\n","1/1 [==============================] - 0s 11ms/step - loss: 0.3415\n","Epoch 7/100\n","1/1 [==============================] - 0s 17ms/step - loss: 0.3159\n","Epoch 8/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.2911\n","Epoch 9/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.2670\n","Epoch 10/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.2438\n","Epoch 11/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.2216\n","Epoch 12/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.2004\n","Epoch 13/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.1801\n","Epoch 14/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.1607\n","Epoch 15/100\n","1/1 [==============================] - 0s 13ms/step - loss: 0.1426\n","Epoch 16/100\n","1/1 [==============================] - 0s 11ms/step - loss: 0.1257\n","Epoch 17/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.1101\n","Epoch 18/100\n","1/1 [==============================] - 0s 11ms/step - loss: 0.0955\n","Epoch 19/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0821\n","Epoch 20/100\n","1/1 [==============================] - 0s 13ms/step - loss: 0.0697\n","Epoch 21/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0584\n","Epoch 22/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0483\n","Epoch 23/100\n","1/1 [==============================] - 0s 13ms/step - loss: 0.0393\n","Epoch 24/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0315\n","Epoch 25/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0247\n","Epoch 26/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0191\n","Epoch 27/100\n","1/1 [==============================] - 0s 6ms/step - loss: 0.0145\n","Epoch 28/100\n","1/1 [==============================] - 0s 13ms/step - loss: 0.0110\n","Epoch 29/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0085\n","Epoch 30/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0069\n","Epoch 31/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0062\n","Epoch 32/100\n","1/1 [==============================] - 0s 13ms/step - loss: 0.0061\n","Epoch 33/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0066\n","Epoch 34/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0074\n","Epoch 35/100\n","1/1 [==============================] - 0s 19ms/step - loss: 0.0085\n","Epoch 36/100\n","1/1 [==============================] - 0s 8ms/step - loss: 0.0096\n","Epoch 37/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0106\n","Epoch 38/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0114\n","Epoch 39/100\n","1/1 [==============================] - 0s 18ms/step - loss: 0.0120\n","Epoch 40/100\n","1/1 [==============================] - 0s 8ms/step - loss: 0.0124\n","Epoch 41/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0124\n","Epoch 42/100\n","1/1 [==============================] - 0s 8ms/step - loss: 0.0122\n","Epoch 43/100\n","1/1 [==============================] - 0s 12ms/step - loss: 0.0118\n","Epoch 44/100\n","1/1 [==============================] - 0s 14ms/step - loss: 0.0112\n","Epoch 45/100\n","1/1 [==============================] - 0s 11ms/step - loss: 0.0105\n","Epoch 46/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0097\n","Epoch 47/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0090\n","Epoch 48/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0082\n","Epoch 49/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0075\n","Epoch 50/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0069\n","Epoch 51/100\n","1/1 [==============================] - 0s 8ms/step - loss: 0.0063\n","Epoch 52/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0059\n","Epoch 53/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0055\n","Epoch 54/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0052\n","Epoch 55/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0050\n","Epoch 56/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0049\n","Epoch 57/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0048\n","Epoch 58/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0048\n","Epoch 59/100\n","1/1 [==============================] - 0s 8ms/step - loss: 0.0048\n","Epoch 60/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0048\n","Epoch 61/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0048\n","Epoch 62/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0048\n","Epoch 63/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0048\n","Epoch 64/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0048\n","Epoch 65/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0048\n","Epoch 66/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0047\n","Epoch 67/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0047\n","Epoch 68/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0046\n","Epoch 69/100\n","1/1 [==============================] - 0s 8ms/step - loss: 0.0045\n","Epoch 70/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0045\n","Epoch 71/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0044\n","Epoch 72/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0043\n","Epoch 73/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0042\n","Epoch 74/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0041\n","Epoch 75/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0040\n","Epoch 76/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0039\n","Epoch 77/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0038\n","Epoch 78/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0037\n","Epoch 79/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0037\n","Epoch 80/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0036\n","Epoch 81/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0036\n","Epoch 82/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0035\n","Epoch 83/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0035\n","Epoch 84/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0035\n","Epoch 85/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0034\n","Epoch 86/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0034\n","Epoch 87/100\n","1/1 [==============================] - 0s 8ms/step - loss: 0.0034\n","Epoch 88/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0033\n","Epoch 89/100\n","1/1 [==============================] - 0s 8ms/step - loss: 0.0033\n","Epoch 90/100\n","1/1 [==============================] - 0s 12ms/step - loss: 0.0032\n","Epoch 91/100\n","1/1 [==============================] - 0s 11ms/step - loss: 0.0032\n","Epoch 92/100\n","1/1 [==============================] - 0s 9ms/step - loss: 0.0032\n","Epoch 93/100\n","1/1 [==============================] - 0s 12ms/step - loss: 0.0031\n","Epoch 94/100\n","1/1 [==============================] - 0s 12ms/step - loss: 0.0031\n","Epoch 95/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0030\n","Epoch 96/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0030\n","Epoch 97/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0029\n","Epoch 98/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0029\n","Epoch 99/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0029\n","Epoch 100/100\n","1/1 [==============================] - 0s 10ms/step - loss: 0.0028\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7c57e03ebbe0>"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# Fazer previsões com o modelo\n","predictions_normalized = model.predict(X_normalized)\n","\n","# Desnormalizar as previsões e os valores reai\n","y_test_original = scaler.inverse_transform(y_normalized.reshape(-1, 1)).flatten()\n","predictions_original = scaler.inverse_transform(predictions_normalized).flatten()\n","\n","\n","\n","# Criar um DataFrame com os resultados\n","df_resultados = pd.DataFrame({'Valor Real': y_test_original, 'Previsão': predictions_original})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HCG5sKsXSD2g","executionInfo":{"status":"ok","timestamp":1696107026299,"user_tz":240,"elapsed":8,"user":{"displayName":"Pedro Silva","userId":"02286839328570899636"}},"outputId":"5dd7207e-5b19-4831-ddfa-836a9154d975"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 5ms/step\n"]}]},{"cell_type":"code","source":["# Calcular métricas de avaliação\n","mse = mean_squared_error(y_test_original, predictions_original)\n","rmse = np.sqrt(mse)\n","mae = mean_absolute_error(y_test_original, predictions_original)\n","# Calcular o erro absoluto entre as previsões e os valores reais\n","absolute_errors = abs(y_test_original - predictions_original)\n","\n","# Calcular a porcentagem de erros em relação aos valores reais\n","percentage_errors = (absolute_errors / y_test_original) * 100\n","\n","# Calcular a média da porcentagem de erros\n","mean_percentage_error = np.mean(percentage_errors)\n","\n","print(\"Mean Squared Error (MSE):\", mse)\n","print(\"Root Mean Squared Error (RMSE):\", rmse)\n","print(\"Mean Absolute Error (MAE):\", mae)\n","print(\"Mean Percentage Error:\", mean_percentage_error, \"%\")\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696107026299,"user_tz":240,"elapsed":6,"user":{"displayName":"Pedro Silva","userId":"02286839328570899636"}},"outputId":"36a86655-e047-4796-b0b1-b2110fbb6854","id":"YortlRL6gvnf"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Squared Error (MSE): 0.0009200263616518352\n","Root Mean Squared Error (RMSE): 0.030331936332054953\n","Mean Absolute Error (MAE): 0.027562686154118284\n","Mean Percentage Error: 4.344429603888091 %\n"]}]},{"cell_type":"code","source":["df_resultados.to_excel('resulta.xlsx')\n"],"metadata":{"id":"R0fuMRwVVQFb","executionInfo":{"status":"ok","timestamp":1696107412434,"user_tz":240,"elapsed":761,"user":{"displayName":"Pedro Silva","userId":"02286839328570899636"}}},"execution_count":16,"outputs":[]}]}